version: '3.8'

services:
  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: matchmaker-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data
  postgres:
    image: postgres:15-alpine
    container_name: matchmaker-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: matchmaker
      POSTGRES_USER: matchmaker
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-matchmaker123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U matchmaker -d matchmaker"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: matchmaker-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - matchmaker
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Matchmaker Service
  matchmaker:
    build: .
    container_name: matchmaker-service
    restart: unless-stopped
    environment:
      NODE_ENV: production
      HTTP_PORT: 3000
      MATCHMAKER_PORT: 9999
      ADMIN_DASHBOARD_PORT: 3001
      USE_HTTPS: false
      LOG_TO_FILE: true
      LOG_LEVEL: info
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://matchmaker:${POSTGRES_PASSWORD:-matchmaker123}@postgres:5432/matchmaker
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      SESSION_TIMEOUT_MS: 1800000
      HEALTH_CHECK_INTERVAL_MS: 30000
    ports:
      - "3000:3000"
      - "9999:9999"
      - "3001:3001"
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Legacy Matchmaker (for backward compatibility)
  matchmaker-legacy:
    build: .
    container_name: matchmaker-legacy
    restart: unless-stopped
    command: ["node", "matchmaker.js"]
    environment:
      NODE_ENV: production
    ports:
      - "8080:90"
      - "9998:9999"
    volumes:
      - ./logs:/app/logs
    profiles:
      - legacy

  # Admin Dashboard (optional, for monitoring)
  admin-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.admin
    container_name: matchmaker-admin
    restart: unless-stopped
    environment:
      NODE_ENV: production
      API_URL: http://matchmaker:3000
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://matchmaker:${POSTGRES_PASSWORD:-matchmaker123}@postgres:5432/matchmaker
    ports:
      - "3002:3000"
    depends_on:
      matchmaker:
        condition: service_healthy
    profiles:
      - admin

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  default:
    name: matchmaker-network